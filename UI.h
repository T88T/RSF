/*
 * UI.h
 *
 *  Created on: 9 mars 2021
 *      Author: TooT
 */

#ifndef UI_H_
#define UI_H_

#include "Arduino.h"
#include <U8g2lib.h>
#include <Array.h>
#include "MusicFile.h"

#define UI_ITEM_PER_PAGE 5
class U8G2_ST7920_128X64_F_SW_SPI;

class UI
{

	public:
		enum Actions{None, Prev, Select, Next};

	public:
		UI(U8G2_ST7920_128X64_F_SW_SPI *LCD);

		void requestAction(uint8_t Action);

		void update(uint16_t dt);
		void fillList(Array<MusicFile*, 100> *list);
		void draw();

	private:

		void drawList();
		void drawItemInfo();
		void drawTrackInfo();
		void drawPlayControls();
		String timeToString(uint32_t time);

		void nextItem();
		void prevItem();
		void selectItem();


	private:
		//State Machine
		enum States{Booting, Browsing, Playing};
		uint8_t mState;
		uint8_t mPendingAction;

		//Graphic elements
		U8G2_ST7920_128X64_F_SW_SPI *mLCD;
		bool mNeedRefresh;

		//Menu browsing
		bool mNeedVScrolling;
		uint8_t mCurrentVScroll;
		uint32_t mVScrollTimer;
		uint8_t mScrollTempo;

		uint8_t mCurrentItem;
		uint8_t mCurrentPage;
		uint8_t mPages;

		Array<String, 100> mList;
		uint32_t ItemDuration; // in ms

		//Track Playing
		enum Controls{/*Back,*/ VolM, Stop, PlayPause, VolP, /*Forw,*/ ControlCount};
		MusicFile *mTrack;
		uint32_t mTrackTimer;
		String mTitle;
		uint32_t mDuration;
		uint32_t mCurrentTime;
		int32_t mTimeOffset;
		uint8_t mCurrentControl;
		bool mPlayState;
		uint8_t mVolume;
};

static unsigned char MenuS_bits[] = {
   0xfc, 0xff, 0xff, 0x3f, 0xfe, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xf7, 0x05, 0xbd, 0xde, 0xe7, 0xf4, 0xb9, 0xde,
   0xe7, 0xf4, 0xb5, 0xde, 0x57, 0x05, 0xb5, 0xde, 0x57, 0xf5, 0xad, 0xde,
   0xb7, 0xf5, 0x9d, 0xde, 0xb7, 0x05, 0xbd, 0xe1, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0x7f,
   0xfc, 0xff, 0xff, 0x3f };

static unsigned char Menu_bits[] = {
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x08, 0xfa, 0x42, 0x21, 0x18, 0x0b, 0x46, 0x21,
   0x18, 0x0b, 0x4a, 0x21, 0xa8, 0xfa, 0x4a, 0x21, 0xa8, 0x0a, 0x52, 0x21,
   0x48, 0x0a, 0x62, 0x21, 0x48, 0xfa, 0x42, 0x1e, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00 };



static unsigned char Play_bits[] = {
   0x00, 0x00, 0x20, 0x00, 0x60, 0x00, 0xe0, 0x00, 0xe0, 0x01, 0xe0, 0x03,
   0xe0, 0x07, 0xe0, 0x0f, 0xe0, 0x0f, 0xe0, 0x07, 0xe0, 0x03, 0xe0, 0x01,
   0xe0, 0x00, 0x60, 0x00, 0x20, 0x00, 0x00, 0x00 };
static unsigned char PlayS_bits[] = {
   0xfc, 0x3f, 0xde, 0x7f, 0x9f, 0xff, 0x1f, 0xff, 0x1f, 0xfe, 0x1f, 0xfc,
   0x1f, 0xf8, 0x1f, 0xf0, 0x1f, 0xf0, 0x1f, 0xf8, 0x1f, 0xfc, 0x1f, 0xfe,
   0x1f, 0xff, 0x9f, 0xff, 0xde, 0x7f, 0xfc, 0x3f };


static unsigned char Pause_bits[] = {
   0x00, 0x00, 0x00, 0x00, 0x30, 0x0c, 0x30, 0x0c, 0x30, 0x0c, 0x30, 0x0c,
   0x30, 0x0c, 0x30, 0x0c, 0x30, 0x0c, 0x30, 0x0c, 0x30, 0x0c, 0x30, 0x0c,
   0x30, 0x0c, 0x30, 0x0c, 0x00, 0x00, 0x00, 0x00 };
static unsigned char PauseS_bits[] = {
   0xfc, 0x3f, 0xfe, 0x7f, 0xcf, 0xf3, 0xcf, 0xf3, 0xcf, 0xf3, 0xcf, 0xf3,
   0xcf, 0xf3, 0xcf, 0xf3, 0xcf, 0xf3, 0xcf, 0xf3, 0xcf, 0xf3, 0xcf, 0xf3,
   0xcf, 0xf3, 0xcf, 0xf3, 0xfe, 0x7f, 0xfc, 0x3f };


static unsigned char Stop_bits[] = {
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x1f, 0xf8, 0x1f, 0xf8, 0x1f,
   0xf8, 0x1f, 0xf8, 0x1f, 0xf8, 0x1f, 0xf8, 0x1f, 0xf8, 0x1f, 0xf8, 0x1f,
   0xf8, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
static unsigned char StopS_bits[] = {
   0xfc, 0x3f, 0xfe, 0x7f, 0xff, 0xff, 0x07, 0xe0, 0x07, 0xe0, 0x07, 0xe0,
   0x07, 0xe0, 0x07, 0xe0, 0x07, 0xe0, 0x07, 0xe0, 0x07, 0xe0, 0x07, 0xe0,
   0x07, 0xe0, 0xff, 0xff, 0xfe, 0x7f, 0xfc, 0x3f };


static unsigned char plusTen_bits[] = {
   0x00, 0x00, 0xf8, 0x07, 0x04, 0x08, 0x02, 0x10, 0x01, 0x20, 0xc9, 0x21,
   0x49, 0xa9, 0x49, 0x71, 0x49, 0x21, 0xc9, 0x01, 0x01, 0x00, 0x01, 0x00,
   0x02, 0x10, 0x04, 0x08, 0xf8, 0x07, 0x00, 0x00 };
static unsigned char plusTenS_bits[] = {
   0xfc, 0x3f, 0x06, 0x78, 0xfb, 0xf7, 0xfd, 0xef, 0xfe, 0xdf, 0x6e, 0xdc,
   0x6e, 0x55, 0x6e, 0x8d, 0x6e, 0xdd, 0x6e, 0xfc, 0xfe, 0xff, 0xfe, 0xff,
   0xfd, 0xef, 0xfb, 0xf7, 0x06, 0x78, 0xfc, 0x3f };


static unsigned char minusTen_bits[] = {
   0x00, 0x00, 0xe0, 0x1f, 0x10, 0x20, 0x08, 0x40, 0x04, 0x80, 0x84, 0x9c,
   0x95, 0x94, 0x8e, 0x94, 0x84, 0x94, 0x80, 0x9c, 0x00, 0x80, 0x00, 0x80,
   0x08, 0x40, 0x10, 0x20, 0xe0, 0x1f, 0x00, 0x00 };
static unsigned char minusTenS_bits[] = {
   0xfc, 0x3f, 0x1e, 0x60, 0xef, 0xdf, 0xf7, 0xbf, 0xfb, 0x7f, 0xbb, 0x71,
   0xaa, 0x75, 0xb1, 0x75, 0xbb, 0x75, 0xbf, 0x71, 0xff, 0x7f, 0xff, 0x7f,
   0xf7, 0xbf, 0xef, 0xdf, 0x1e, 0x60, 0xfc, 0x3f };

static unsigned char VolMoinsS_bits[] = {
   0xf8, 0x1e, 0x7e, 0x7e, 0xbe, 0x7e, 0xdf, 0xfe, 0xef, 0xfe, 0xf1, 0xfe,
   0xfd, 0xfe, 0xfd, 0xfe, 0xfd, 0x82, 0xfd, 0xfe, 0xf1, 0xfe, 0xef, 0xfe,
   0xdf, 0xfe, 0xbe, 0x7e, 0x7e, 0x7e, 0xf8, 0x1e };
static unsigned char VolMoins_bits[] = {
   0x00, 0x01, 0x80, 0x01, 0x40, 0x01, 0x20, 0x01, 0x10, 0x01, 0x0e, 0x01,
   0x02, 0x01, 0x02, 0x01, 0x02, 0x7d, 0x02, 0x01, 0x0e, 0x01, 0x10, 0x01,
   0x20, 0x01, 0x40, 0x01, 0x80, 0x01, 0x00, 0x01 };

static unsigned char VolPlusS_bits[] = {
   0xf8, 0x1e, 0x7e, 0x7e, 0xbe, 0x7e, 0xdf, 0xfe, 0xef, 0xfe, 0xf1, 0xfe,
   0xfd, 0xee, 0xfd, 0xee, 0xfd, 0x82, 0xfd, 0xee, 0xf1, 0xee, 0xef, 0xfe,
   0xdf, 0xfe, 0xbe, 0x7e, 0x7e, 0x7e, 0xf8, 0x1e };
static unsigned char VolPlus_bits[] = {
   0x00, 0x01, 0x80, 0x01, 0x40, 0x01, 0x20, 0x01, 0x10, 0x01, 0x0e, 0x01,
   0x02, 0x11, 0x02, 0x11, 0x02, 0x7d, 0x02, 0x11, 0x0e, 0x11, 0x10, 0x01,
   0x20, 0x01, 0x40, 0x01, 0x80, 0x01, 0x00, 0x01 };

static unsigned char RSF_bits[] = {
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x03, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0xf0, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x87, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x03,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x1c, 0x07, 0x00, 0x00, 0x00,
   0x00, 0x38, 0x0e, 0xc0, 0x31, 0x06, 0x00, 0x00, 0x00, 0x00, 0x38, 0x0e,
   0x00, 0x23, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x26, 0x0c,
   0x80, 0x77, 0xf8, 0x03, 0x38, 0x80, 0x3f, 0x64, 0x0c, 0x80, 0xff, 0xfc,
   0xc7, 0x3f, 0xce, 0x7f, 0x4c, 0x18, 0x80, 0xff, 0xbc, 0xe7, 0x3f, 0xce,
   0xff, 0xc8, 0x18, 0x80, 0xe7, 0xbd, 0xe7, 0x39, 0xce, 0xf3, 0x98, 0x18,
   0x80, 0xe7, 0x81, 0xe7, 0x39, 0xce, 0xf3, 0x90, 0x18, 0x80, 0x07, 0xf0,
   0xe7, 0x39, 0xce, 0xf3, 0x90, 0x18, 0x80, 0x07, 0xf8, 0xe7, 0x39, 0xce,
   0xf3, 0x00, 0x00, 0x80, 0x07, 0xbc, 0xe7, 0x39, 0xce, 0xf3, 0x00, 0x00,
   0x80, 0x07, 0xbc, 0xe7, 0x39, 0xce, 0xf3, 0x00, 0x00, 0x80, 0x07, 0xbc,
   0xe7, 0x39, 0xce, 0xf3, 0x00, 0x00, 0x80, 0x07, 0xfc, 0xe7, 0x3f, 0xce,
   0xff, 0x00, 0x00, 0x80, 0x07, 0xf8, 0xc7, 0x3f, 0x8e, 0x7f, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xc1, 0x00, 0xc0, 0x40, 0x00, 0x00,
   0x80, 0x03, 0x80, 0x41, 0x00, 0x00, 0x40, 0x00, 0x00, 0x80, 0x72, 0xb9,
   0xe3, 0xee, 0xee, 0x4e, 0x00, 0x00, 0x80, 0x41, 0xa9, 0x41, 0x2a, 0xa2,
   0x4a, 0x00, 0x00, 0x00, 0x72, 0xa9, 0x41, 0x2e, 0xe2, 0x4a, 0x00, 0x00,
   0x80, 0x52, 0xa9, 0x43, 0x22, 0x22, 0x4a, 0x00, 0x00, 0x80, 0x73, 0xa9,
   0x43, 0x2e, 0xe2, 0x4e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x7f, 0xf0, 0x01, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xf8,
   0x81, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x80, 0xf7, 0xf8, 0x81, 0x73, 0xe0,
   0x00, 0x00, 0x00, 0x80, 0xf7, 0xfc, 0x01, 0x70, 0x60, 0x00, 0x00, 0x00,
   0x80, 0xff, 0xec, 0x01, 0x78, 0xf0, 0x00, 0x00, 0x00, 0x00, 0xff, 0xee,
   0x01, 0x3c, 0x60, 0xff, 0x00, 0x00, 0x00, 0xf0, 0xfe, 0x07, 0x1e, 0x60,
   0xdb, 0x00, 0x00, 0x80, 0xf7, 0xfe, 0x07, 0x0f, 0x60, 0xdb, 0x00, 0x00,
   0x80, 0xff, 0xe0, 0x99, 0x7f, 0x60, 0xdb, 0x00, 0x00, 0x00, 0x7f, 0xe0,
   0x99, 0x7f, 0x60, 0xdb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };


#endif /* UI_H_ */
